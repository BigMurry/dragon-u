{"version":3,"file":"static/webpack/static/development/pages/index.js.cc6a1ee33b9df41ec216.hot-update.js","sources":["webpack:///./components/DragonCell.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport cn from 'classnames';\nimport Link from 'next/link';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport CoolnessIcon from 'mdi-material-ui/StarCircle';\nimport StrengthIcon from 'mdi-material-ui/Mushroom';\nimport HealthIcon from 'mdi-material-ui/HeartMultiple';\nimport ManaIcon from 'mdi-material-ui/WeatherHurricane';\nimport LinkIcon from 'mdi-material-ui/LinkVariant';\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Fab from '@material-ui/core/Fab';\nimport PinIcon from 'mdi-material-ui/Pin';\nimport PinOffIcon from 'mdi-material-ui/PinOff';\n\nimport _get from 'lodash/get';\nimport _chunk from 'lodash/chunk';\nimport {getCoolnessScore, getSkills, getDS} from 'dragon-g';\nimport {getContractInstance} from '../artifacts';\nimport {onPinStore, offPinStore} from '../redux/store';\n\nlet useStyles = makeStyles(theme => ({\n  container: {},\n  cont: {\n    marginTop: '30px'\n  },\n  dragons: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  info: {\n    marginBottom: '20px',\n    padding: '15px',\n    backgroundColor: 'rgba(247, 51, 120, 0.05)'\n  },\n  head: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  id: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  link: {\n    textDecoration: 'none',\n    marginRight: '10px',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n  linkIcon: {\n    fontSize: '0.8em'\n  },\n  score: {\n    margin: '20px 0'\n  },\n  chip: {\n    margin: '0 5px 4px 0'\n  },\n  skills: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  skill: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  skLabel: {\n    color: 'rgba(150, 150, 150, 0.8)'\n  },\n  dragon: {\n  },\n  genes: {\n    padding: '10px'\n  },\n  part: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  label: {\n    flexBasis: '40px',\n    fontSize: '0.8em'\n  },\n  codes: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  cell: {\n    padding: '4px',\n    margin: '2px 2px',\n    borderRadius: '2px',\n    display: 'flex',\n    alignItems: 'flex-end',\n    backgroundColor: 'rgba(220, 220, 220, 0.2)'\n  },\n  gene: {\n    fontSize: '0.6em',\n    marginRight: '5px'\n  },\n  level: {\n    fontSize: '0.7em'\n  },\n  domi: {\n    fontWeight: '600'\n  },\n  inbreed: {\n    color: 'rgba(100, 100, 100, 0.7)'\n  },\n  rare: {\n    color: 'purple'\n  },\n  epic: {\n    color: 'orange'\n  },\n  active: {\n    backgroundColor: 'rgba(220, 200, 200, 0.8)'\n  },\n  avatarCont: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  avatar: {\n    width: '50%'\n  }\n}));\n\nconst SKILL_NAME = ['Attack', 'Defense', 'Stamina', 'Speed', 'Intelligence'];\nconst AVATAR_PRIX = 'https://api.dragonereum.io/images/dragons/large/';\n\nasync function fetchHealthAndMana(web3, id) {\n  let res = {};\n  if (web3 && id) {\n    const getterContract = getContractInstance(web3, 'Getter');\n    res = await getterContract.methods.getDragonCurrentHealthAndMana(id).call();\n  }\n  return res;\n}\n\nfunction dominantSlot(genes = []) {\n  const [gene0, gene1] = genes;\n  if (gene1.isDominant && !gene0.isDominant) {\n    return 1;\n  }\n  return 0;\n}\n\nlet DragonCell = ({genes, id, web3, refetch, onPin, offPin, isPin}) => {\n  const classes = useStyles();\n  const [health, setHealth] = useState('...');\n  const [mana, setMana] = useState('...');\n\n  const codes = _chunk(_get(genes, [id, 'allCodes'], []), 4);\n  const parsed = _get(genes, id);\n  let coolnessScore;\n  let skills;\n  let ds;\n  if (parsed) {\n    coolnessScore = getCoolnessScore(parsed);\n    skills = getSkills(parsed.dominants);\n    ds = getDS(skills);\n  }\n\n  function handleFetchHealthAndMana(e) {\n    fetchHealthAndMana(web3, id)\n    .then(({health, mana, healthPercentage, manaPercentage}) => {\n      setHealth(`${health / 100}(${healthPercentage}%)`);\n      setMana(`${mana / 100}(${manaPercentage}%)`);\n    });\n  }\n\n  useEffect(() => {\n    if (web3) {\n      handleFetchHealthAndMana();\n    }\n  }, [refetch, web3]);\n\n  return (\n    <div className={classes.cont}>\n      {\n        codes.length > 0 &&\n        <Paper className={classes.dragon}>\n          <div className={classes.info}>\n            <div className={classes.head}>\n              <div className={classes.id}>\n                <Link>\n                  <a href={`https://dapp.dragonereum.io/dragons/${id}`} className={classes.link} target={'_blank'} title={'dapp.dragonereum.io'}>\n                    <Typography variant={'h6'}>{`#${id}`}</Typography>\n                  </a>\n                </Link>\n                <LinkIcon className={classes.linkIcon} />\n              </div>\n              <Fab size={'small'} color={'primary'} aria-label={'Add'} className={classes.margin}\n                onClick={e => {\n                  if (isPin) {\n                    offPin(id);\n                  } else {\n                    onPin(id);\n                  }\n                  e.preventDefault();\n                }}\n                >\n                {isPin ? <PinOffIcon /> : <PinIcon />}\n              </Fab>\n            </div>\n            <div className={classes.avatarCont}>\n              <img className={classes.avatar} src={`${AVATAR_PRIX}${id}.png`} />\n              <div className={classes.score}>\n                <Tooltip title={'Coolness score'}>\n                  <Chip\n                    icon={<CoolnessIcon />}\n                    label={coolnessScore / 100}\n                    className={classes.chip}\n                    color='secondary'\n                    variant='outlined'\n                    />\n                </Tooltip>\n                <Tooltip title={'Strength score'}>\n                  <Chip\n                    icon={<StrengthIcon />}\n                    label={ds}\n                    className={classes.chip}\n                    color='secondary'\n                    variant='outlined'\n                    />\n                </Tooltip>\n                <Tooltip title={'Health'}>\n                  <Chip\n                    icon={<HealthIcon />}\n                    label={health}\n                    className={classes.chip}\n                    onClick={handleFetchHealthAndMana}\n                    color='secondary'\n                    variant='outlined'\n                    />\n                </Tooltip>\n                <Tooltip title={'Mana'}>\n                  <Chip\n                    icon={<ManaIcon />}\n                    label={mana}\n                    className={classes.chip}\n                    onClick={handleFetchHealthAndMana}\n                    color='secondary'\n                    variant='outlined'\n                    />\n                </Tooltip>\n              </div>\n            </div>\n            <div className={classes.skills}>\n              {\n                skills.map((sk, idx) => {\n                  return (\n                    <div className={classes.skill} key={idx}>\n                      <Typography className={classes.skLabel} variant={'caption'}>{SKILL_NAME[idx]}</Typography>\n                      <Typography className={classes.skValue}>{sk / 100}</Typography>\n                    </div>\n                  );\n                })\n              }\n            </div>\n          </div>\n          <div className={classes.genes}>\n            {\n            codes.map((c, idx) => {\n              const activeSlot = dominantSlot(c);\n              return (\n                <div className={classes.part} key={idx}>\n                  <Typography className={classes.label}>{c[0].bodyPart}</Typography>\n                  <div className={classes.codes}>\n                    {\n                      c.map((item, slot) => {\n                        return (\n                          <div key={`${idx}-${slot}`} className={cn(classes.cell, {[classes.active]: activeSlot === slot})}>\n                            <Typography className={cn(\n                              classes.gene,\n                              {\n                                [classes.domi]: item.isDominant,\n                                [classes.inbreed]: item.geneVariatyIdx === 0,\n                                [classes.rare]: item.geneVariatyIdx >= 5,\n                                [classes.epic]: item.geneVariatyIdx >= 8\n                              })}>{item.geneVariaty}</Typography>\n                            <Typography className={cn(\n                              classes.level,\n                              {\n                                [classes.domi]: item.isDominant,\n                                [classes.inbreed]: item.geneVariatyIdx === 0,\n                                [classes.rare]: item.geneVariatyIdx >= 5,\n                                [classes.epic]: item.geneVariatyIdx >= 8\n                              })}>{item.geneLevel}</Typography>\n                          </div>\n                        );\n                      })\n                    }\n                  </div>\n                </div>\n              );\n            })\n            }\n          </div>\n        </Paper>\n      }\n    </div>\n  );\n};\n\nDragonCell = connect(\n  ({web3}) => ({web3}),\n  (dispatch) => ({\n    onPin: bindActionCreators(onPinStore, dispatch),\n    offPin: bindActionCreators(offPinStore, dispatch)\n  })\n)(DragonCell);\n\nexport default DragonCell;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAzGA;AAAA;AA8GA;AACA;AACA;AACA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AASA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAKA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAMA;;;;A","sourceRoot":""}