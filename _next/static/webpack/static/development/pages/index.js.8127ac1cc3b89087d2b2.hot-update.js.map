{"version":3,"file":"static/webpack/static/development/pages/index.js.8127ac1cc3b89087d2b2.hot-update.js","sources":["webpack:///./components/Root.js"],"sourcesContent":["import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { connect } from 'react-redux';\nimport * as ethers from 'ethers';\nimport { bindActionCreators } from 'redux';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { SnackbarProvider, withSnackbar } from 'notistack';\nimport Chip from '@material-ui/core/Chip';\nimport TipIcon from 'mdi-material-ui/HeartCircle';\nimport GithubIcon from 'mdi-material-ui/GithubCircle';\nimport Dialog from '@material-ui/core/Dialog';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport QRCode from 'qrcode.react';\nimport HeartIcon from 'mdi-material-ui/Heart';\n\nimport { clearErrorStore, setErrorStore } from '../redux/store';\nimport {useWeb3Provider, useAccount} from './Web3Provider';\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    margin: '0 10px'\n  },\n  contWrapper: {\n    minHeight: '500px'\n  },\n  dialogWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '30px'\n  },\n  dialog: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px'\n  },\n  footer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: '30px 0 20px 0'\n  },\n  by: {\n    fontSize: '0.7em'\n  },\n  icons: {\n    display: 'flex'\n  },\n  chip: {\n    margin: '10px'\n  },\n  donate: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: '0 20px 20px 20px'\n  },\n  donateTitle: {\n    display: 'flex',\n    padding: '20px 10px',\n    alignItems: 'center'\n  },\n  titleMsg: {\n    color: 'rgba(90, 90, 90, 0.8)'\n  },\n  donateIcon: {\n    marginRight: '2px',\n    color: '#f50057'\n  },\n  addressWrapper: {\n    margin: '10px 0',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  address: {\n    fontSize: '0.5em',\n    color: 'rgba(90, 90, 90, 0.4)',\n    padding: '2px',\n    '&:hover': {\n      backgroundColor: 'rgba(200, 200, 200, 0.2)',\n      cursor: 'pointer'\n    }\n  },\n  notify: {\n    color: '#f50057',\n    fontSize: '0.5em'\n  }\n}));\n\nconst DONATOR_ACCOUNT = '0xCC6a7D642B66aFeed091B87b9175c61F8993cb3b';\nfunction sendEther(signer, cb) {\n  if (signer) {\n    signer.sendTransaction({\n      to: DONATOR_ACCOUNT,\n      value: ethers.utils.parseEther('0.006') // 0.006 ether\n    }).then(cb);\n  }\n}\n\nfunction short(str = '', len) {\n  return str.substring(0, len) + '...';\n}\n\nlet Msg = ({enqueueSnackbar, error, clearError}) => {\n  if (error) {\n    enqueueSnackbar(error.msg, {variant: error.variant, onClose: () => clearError(error.id)});\n  }\n  return <React.Fragment />;\n};\n\nMsg = withSnackbar(Msg);\nMsg = connect(\n  ({error}) => ({error}),\n  (dispatch) => ({clearError: bindActionCreators(clearErrorStore, dispatch)})\n)(Msg);\n\nlet Root = ({children, setError}) => {\n  const classes = useStyles();\n  const [qrcode, showQrcode] = useState(false);\n  const [thankDialog, showThankDialog] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const provider = useWeb3Provider();\n  const account = useAccount(provider);\n\n  if (!provider) {\n    return (\n      <div className={classes.dialogWrapper}>\n        <Paper className={classes.dialog}>\n          <Typography>Waiting for web3 connecting...</Typography>\n          <CircularProgress />\n        </Paper>\n      </div>\n    );\n  }\n  const signer = provider.getSigner();\n  const isLogin = !!account;\n  return (\n    <div className={classes.container}>\n      <div className={classes.contWrapper}>\n        {children}\n      </div>\n      <Msg />\n      <div className={classes.footer}>\n        <Typography className={classes.by}>{`diaomouren@gmail.com`}</Typography>\n        <div className={classes.icons}>\n          <Chip\n            icon={<TipIcon />}\n            label={isLogin ? '0.006 ETH' : short(DONATOR_ACCOUNT, 7)}\n            className={classes.chip}\n            onClick={e => {\n              if (isLogin) {\n                sendEther(signer, (e) => {\n                  if (e) {\n                    console.log(e);\n                    setError(new Date().getTime(), e.message, 'error');\n                  } else {\n                    showThankDialog(true);\n                  }\n                });\n              } else {\n                showQrcode(true);\n              }\n            }}\n            color='secondary'\n            variant='outlined'\n            />\n          <Chip\n            icon={<GithubIcon />}\n            label={'Star'}\n            className={classes.chip}\n            component='a'\n            href={`https://github.com/BigMurry/dragon-u`}\n            target={'_blank'}\n            clickable\n            color='secondary'\n            variant='outlined'\n            />\n        </div>\n        <Dialog open={thankDialog} onClose={e => showThankDialog(false)}>\n          <div className={classes.donateTitle}>\n            <HeartIcon className={classes.donateIcon} />\n            <Typography className={classes.titleMsg} variant={'h6'}>{`Thank you!`}</Typography>\n            <HeartIcon className={classes.donateIcon} />\n          </div>\n        </Dialog>\n        <Dialog open={qrcode} onClose={e => {\n          showQrcode(false);\n          setCopied(false);\n        }}>\n          <div className={classes.donateTitle}>\n            <HeartIcon className={classes.donateIcon} />\n            <Typography className={classes.titleMsg} variant={'h6'}>{`Thanks a lot`}</Typography>\n            <HeartIcon className={classes.donateIcon} />\n          </div>\n          <div className={classes.donate}>\n            <div className={classes.addressWrapper}>\n              <CopyToClipboard text={DONATOR_ACCOUNT} onCopy={() => setCopied(true)}>\n                <Typography className={classes.address} variant={'caption'}>{DONATOR_ACCOUNT}</Typography>\n              </CopyToClipboard>\n              {\n                copied && <Typography variant={'caption'} className={classes.notify}>{'copied!'}</Typography>\n              }\n            </div>\n            <QRCode value={DONATOR_ACCOUNT} />\n          </div>\n        </Dialog>\n      </div>\n    </div>\n  );\n};\n\nRoot = connect(\n  ({web3, account}) => ({web3, account}),\n  (dispatch) => ({setError: bindActionCreators(setErrorStore, dispatch)})\n)(Root);\n\nlet RootWrapper = (props) => {\n  return (\n    <SnackbarProvider maxSnack={4}>\n      <Root {...props} />\n    </SnackbarProvider>\n  );\n};\n\nexport default RootWrapper;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AACA;AACA;AAFA;AAvEA;AAAA;AA6EA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}