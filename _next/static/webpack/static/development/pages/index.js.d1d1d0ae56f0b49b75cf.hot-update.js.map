{"version":3,"file":"static/webpack/static/development/pages/index.js.d1d1d0ae56f0b49b75cf.hot-update.js","sources":["webpack:///./redux/sagas.js"],"sourcesContent":["import { all, put, takeEvery, select, call } from 'redux-saga/effects';\nimport {eventChannel} from 'redux-saga';\nimport _get from 'lodash/get';\nimport _toLower from 'lodash/toLower';\nimport Web3 from 'web3';\nimport {tryEnableWeb3} from '../lib/share';\nimport {getContractInstance} from '../artifacts';\nimport {parse} from 'dragon-g';\n\nimport {\n  setWeb3Store,\n  setAccountStore,\n  setParsedGeneStore,\n  setErrorStore\n} from './store';\n\nfunction heartbeat(interval) {\n  return eventChannel(emitter => {\n    setTimeout(() => {\n      emitter({type: 'HEART_BEAT'});\n    }, 10000);\n    const iv = setInterval(() => {\n      emitter({\n        type: 'HEART_BEAT'\n      });\n    }, interval);\n    return () => {\n      clearInterval(iv);\n    };\n  });\n}\n\nfunction * updateAccount(action) {\n  let web3 = yield select(state => _get(state, 'web3', null));\n  if (!web3 && typeof window !== 'undefined') {\n    if (typeof window.web3 !== 'undefined') {\n      web3 = new Web3(window.web3.currentProvider);\n    } else {\n      web3 = new Web3(new Web3.providers.HttpProvider('https://mainnet.infura.io/v3/bf28a9be07f4453bb111125224c1c9ba'));\n    }\n    yield put(setWeb3Store(web3));\n  }\n  if (web3) {\n    try {\n      const connected = yield call(web3.eth.net.isListening);\n      if (connected) {\n        yield call(tryEnableWeb3);\n        const accounts = yield call(web3.eth.getAccounts);\n        if (accounts && accounts.length > 0) {\n          yield put(setAccountStore(_toLower(accounts[0])));\n        }\n      }\n    } catch (e) {}\n  }\n}\n\nfunction * fetchGeneSaga(action) {\n  const {id} = action.payload;\n  let web3 = yield select(state => _get(state, 'web3', null));\n  if (web3) {\n    try {\n      const dragon721 = getContractInstance(web3, '721');\n      const rawGenes = yield call(dragon721.methods.getGenome(id).call);\n      const parsedGene = parse(rawGenes);\n      yield put(setParsedGeneStore(id, parsedGene));\n    } catch (e) {\n      yield put(setErrorStore(new Date().getTime(), 'web3 request failed.', 'error'));\n    }\n  } else {\n    yield put(setErrorStore(new Date().getTime(), 'web3 not ready.', 'info'));\n  }\n}\n\nexport default function * rootSaga() {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const walletChann = heartbeat(1000); // 1s heartbeat\n  yield all([\n    takeEvery(walletChann, updateAccount),\n    takeEvery('FETCH_GENE_SAGA', fetchGeneSaga)\n  ]);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;AAwBA;;;AAiBA;AACA;AA1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AARA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAYA;AACA;AAbA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AAcA;AACA;AAfA;AAAA;AAeA;AACA;AAhBA;AAeA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AADA;AAiBA;AACA;AAlBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AAHA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AALA;AAMA;AACA;AAPA;AAMA;AACA;AAPA;AAQA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AALA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}